{% extends 'layout.html.twig' %}


{% block map %}

<link rel="icon" href="/assets/images/favicon.png">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
            crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
            crossorigin=""></script>
    <link rel="stylesheet" href="/assets/css/map.css">

{% endblock %}

{% block content %}

<script type="text/javascript">


			// On initialise la latitude et la longitude de Paris (centre de la carte)
			
      let latPos = 47.8322;
      let lonPos = 1.92759;
      let lat = 0;
      let lon = 0;
      let markers = [];
      let marker = "";
      let popupContent = "";

      let searchDistance = 9; // Distance de recherche 
      let catchDistance = 10; // Distance MAXIMALE à laquelle on peut attrapper le bonbon (dans ce cas le bouton "Je l'ai!" s'affiche)

			let macarte = null;

			// Fonction d'initialisation de la carte
			function initMap() {

				// Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
          macarte = L.map('map').setView([latPos, lonPos], 11);

          // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
          L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
              // Il est toujours bien de laisser le lien vers la source des données
              attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
              minZoom: 10,
              maxZoom: 20
          }).addTo(macarte);

          //icone position joueur
          var myPositionIcon = L.icon({
            iconUrl: '/assets/images/pos.png',
            iconSize: [50, 50],
            iconAnchor: [25, 50],
            popupAnchor: [-3, -76],
          });
          //marker du joueur
          marker = L.marker([latPos, lonPos], {icon : myPositionIcon}).addTo(macarte);
          markers.push(marker);

          {% for data in datas %}
            lat = {{ data.latitude }};
            lon = {{ data.longitude }};
            //Ajout d'un marker pour chaque adresse de la BDD
            if (distanceBetween(latPos, lonPos, lat, lon) <= searchDistance) {
              marker = L.marker([lat, lon]).addTo(macarte);
              markers.push(marker);
              //Contenu du popup (si on click sur le marker)
              popupContent = " {{ data.joueur_nom }}</br />" +
              "<img src='{{ data.bonbon_image }}' width:'60px' height='80px' /></br />" + 
              "{{ data.bonbon_nom }} <br />";

              //Si markeur proche de la position de l'user, alors je peut cliquer sur le bouton pour le chopper 
              if (distanceBetween(latPos, lonPos, lat, lon) <= catchDistance) {
              popupContent += "<form method='post' action='/'>" +
                  "<input type='hidden' value='{{data.bonbon_id}}' name='bonbon_id' />" +
                  "<input type='hidden' value='{{data.adresse_id}}' name='adresse_id' />" +
                  "<button name=''>Je l ai !</button>" + 
                  "</form>"
              }
            }
            marker.bindPopup( popupContent );
          {% endfor %}

          let group = new L.featureGroup(markers);
          macarte.fitBounds(group.getBounds().pad(0.5));

        }
			window.onload = function(){
				// Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
				initMap(); 
			};

      function distanceBetween(lat1, lon1, lat2, lon2) {
        let rla1 = degrees_to_radians(lat1);
        let rlo1 = degrees_to_radians(lon1);
        let rla2 = degrees_to_radians(lat2);
        let rlo2 = degrees_to_radians(lon2);
        let earth_radius = 6378137;
        let dlo = (rlo2 - rlo1) / 2;
        let dla = (rla2 - rla1) / 2;
        let a = (Math.sin(dla) * Math.sin(dla)) + Math.cos(rla1) * Math.cos(rla2) * (Math.sin(dlo) * Math.sin(dlo));
        let d = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        let dist = earth_radius * d;
        let distance = Math.round(dist/1000,2);
        return distance;
      }

      function degrees_to_radians(degrees)
      {
        var pi = Math.PI;
        return degrees * (pi/180);
      }
		</script>

<section>
    <h1 >BONBONDEX</h1>
    <p class="mt-3">Bienvenue {{ session }}</p>
<div id="map"></div>
<span class="candy align-bottom">
            <a href="/option"><img src="assets/images/ico_candy.png" alt="candy" height="50vh" width="auto"></a>
        </span>
    </section>
{% endblock %}
